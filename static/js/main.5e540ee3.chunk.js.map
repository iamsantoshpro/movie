{"version":3,"sources":["components/Header.js","components/Movie.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Movie","movie","poster","Poster","Title","width","alt","src","Year","Search","useState","searchValue","setSearchValue","value","onChange","e","target","type","onClick","preventDefault","search","App","loading","setLoading","movies","setMovies","errorMessage","setErrorMessage","useEffect","fetch","then","response","json","jsonResponse","Response","Error","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oOASeA,G,MAPA,SAACC,GACZ,OACI,4BAAQC,UAAU,cACd,4BAAKD,EAAME,SCYRC,EAbD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACNC,EAA0B,QAAjBD,EAAME,OAHS,qGAGsCF,EAAME,OAC1E,OACI,yBAAKL,UAAU,SACX,4BAAKG,EAAMG,OACX,yBAAKN,UAAU,aACX,yBAAKO,MAAM,MAAMC,IAAG,6BAAwBL,EAAMG,OAASG,IAAKL,KAEpE,2BAAID,EAAMO,QCaPC,EAvBA,SAACZ,GAAW,IAAD,EACgBa,mBAAS,IADzB,mBACfC,EADe,KACFC,EADE,KAgBtB,OACI,0BAAMd,UAAU,UACZ,2BAAOe,MAAOF,EAAaG,SAfF,SAACC,GAC9BH,EAAeG,EAAEC,OAAOH,QAc2CI,KAAK,SACpE,2BAAOC,QARY,SAACH,GACxBA,EAAEI,iBACFtB,EAAMuB,OAAOT,GALbC,EAAe,KAWyBK,KAAK,SAASJ,MAAM,aCsCrDQ,EAnDH,WAAM,IAAD,EACeX,oBAAS,GADxB,mBACRY,EADQ,KACCC,EADD,OAEab,mBAAS,IAFtB,mBAERc,EAFQ,KAEAC,EAFA,OAGyBf,mBAAS,MAHlC,mBAGRgB,EAHQ,KAGMC,EAHN,KAKfC,qBAAU,WACRC,MARkB,kDASfC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJR,EAAUQ,EAAaxB,QACvBc,GAAW,QAEd,IAoBH,OACE,yBAAKzB,UAAU,OACd,kBAAC,EAAD,CAAQC,KAAK,WACb,kBAAC,EAAD,CAAQqB,OArBI,SAAAT,GACbY,GAAW,GACXI,EAAgB,MAEhBE,MAAM,8BAAD,OAA+BlB,EAA/B,qBACJmB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAC0B,SAA1BA,EAAaC,UACfT,EAAUQ,EAAaxB,QACvBc,GAAW,KAEXI,EAAgBM,EAAaE,OAC7BZ,GAAW,UAUd,uBAAGzB,UAAU,aAAb,yCACA,yBAAKA,UAAU,UACZwB,IAAYI,EACZ,4CACIA,EACH,yBAAK5B,UAAU,gBAAgB4B,GAE/BF,EAAOY,KAAI,SAACnC,EAAOoC,GAAR,OACT,kBAAC,EAAD,CAAOC,IAAG,UAAKD,EAAL,YAAcpC,EAAMG,OAASH,MAAOA,UCxCrCsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.5e540ee3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = (props) =>{\r\n    return(\r\n        <header className='App-header'>\r\n            <h2>{props.text}</h2>\r\n        </header>\r\n    );\r\n};\r\nexport default Header","import React from 'react'\r\n\r\nconst DEFAULT_PLACEHOLDER_IMAGE = 'https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg'\r\n\r\nconst Movie = ({movie}) => {\r\n    const poster = movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\r\n    return(\r\n        <div className=\"movie\">\r\n            <h2>{movie.Title}</h2>\r\n            <div className=\"imageWrap\">\r\n                <img width=\"200\" alt={`The Movie Title is ${movie.Title}`} src={poster} />\r\n            </div>\r\n            <p>{movie.Year}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Movie;","import React, { useState } from 'react'\r\n\r\nconst Search = (props) => {\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n    const handleSearchInputChanges = (e) => {\r\n        setSearchValue(e.target.value);\r\n    }\r\n\r\n    const resetInputField = () =>{\r\n        setSearchValue(\"\");\r\n    }\r\n\r\n    const callSearchFunction = (e) => {\r\n        e.preventDefault();\r\n        props.search(searchValue);\r\n        resetInputField();\r\n    }\r\n    return(\r\n        <form className=\"search\">\r\n            <input value={searchValue} onChange={handleSearchInputChanges} type=\"text\" />\r\n            <input onClick={callSearchFunction} type=\"Submit\" value=\"Search\" />\r\n        </form>\r\n    );\r\n}\r\nexport default Search;","import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\n\nconst MOVIE_API_URL = 'https://www.omdbapi.com/?s=man&apikey=f5222f9e'\n\nconst App = () =>{\n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        setMovies(jsonResponse.Search);\n        setLoading(false);\n      });\n  }, []);\n\n  const search = searchValue => {\n    setLoading(true);\n    setErrorMessage(null);\n\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=f5222f9e`)\n    .then(response => response.json())\n    .then(jsonResponse => {\n      if (jsonResponse.Response === \"True\") {\n        setMovies(jsonResponse.Search);\n        setLoading(false);\n      } else {\n        setErrorMessage(jsonResponse.Error);\n        setLoading(false);\n      }\n    });\n  };\n\n\n  return (\n    <div className=\"App\">\n     <Header text=\"HOOKED\" />\n     <Search search={search} />\n     <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n     <div className=\"movies\">\n       {loading && !errorMessage ? (\n        <span>loading...</span>\n        ) : errorMessage ? (\n         <div className=\"errorMessage\">{errorMessage}</div>\n       ) : (\n         movies.map((movie, index) => (\n           <Movie key={`${index}-${movie.Title}`} movie={movie} />\n         ))\n       )}\n     </div>\n   </div>\n );\n};\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}